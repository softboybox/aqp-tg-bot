import uuid
import asyncio
import logging
import os
import time
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, constants
from telegram.ext import ContextTypes, ConversationHandler
from src.knowledge_base.knowledge_service import KnowledgeService
from src.auth.auth_service import AuthService
from src.bot.middleware import admin_required
from src.bot.states import BotState, WAITING_CSV
from src.prompt.prompt_service import PostgresPromptService
from src.config.settings import settings

logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    auth_service: AuthService = context.bot_data["auth_service"]
    auth_service.logout(user_id)
    context.user_data.clear()
    await update.message.reply_text(
        "–í—ñ—Ç–∞—î–º–æ –≤ —á–∞—Ç-–±–æ—Ç—ñ Aquapolis! –ù–∞–ø–∏—à—ñ—Ç—å, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å",
        reply_markup=ReplyKeyboardRemove()
    )


def get_admin_keyboard():
    return [
        [KeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ–º—ñ—á–Ω–∏–∫–∞"), KeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ–º—Ç")],
        [KeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–æ–º—Ç"), KeyboardButton("–û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é")],
        [KeyboardButton("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV"), KeyboardButton("–°—Ç–∞—Ç—É—Å –±–∞–∑–∏ –∑–Ω–∞–Ω—å")]
    ]


async def _request_new_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"Requesting new prompt from user {update.effective_user.id}")
    context.user_data[BotState.AWAITING_PROMPT.value] = True
    context.user_data["prompt_parts"] = []
    await update.message.reply_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø—Ä–æ–º—Ç (—è–∫—â–æ –ø—Ä–æ–º—Ç –¥–æ–≤–≥–∏–π, –≤—ñ–¥–ø—Ä–∞–≤–ª—è–π—Ç–µ –π–æ–≥–æ —á–∞—Å—Ç–∏–Ω–∞–º–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ):",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("–ó–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–æ–º—Ç")], [KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏")]],
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )


@admin_required
async def kb_upload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"CSV upload requested by user {update.effective_user.id}")
    
    context.user_data[BotState.AWAITING_CSV_UPLOAD.value] = True
    
    await update.message.reply_text(
        "üìé –í—ñ–¥–ø—Ä–∞–≤—Ç–µ CSV —Ñ–∞–π–ª –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏ –∑–Ω–∞–Ω—å.\n\n"
        f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: {settings.MAX_CSV_SIZE_MB} MB\n"
        "–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏: .csv —Ñ–∞–π–ª–∏\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°–∫–∞—Å—É–≤–∞—Ç–∏' –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏.",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏")]],
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )


async def handle_csv_document_upload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    doc = update.message.document
    
    if not doc:
        await update.message.reply_text("‚ùå –í—ñ–¥–ø—Ä–∞–≤—Ç–µ CSV —Ñ–∞–π–ª –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°–∫–∞—Å—É–≤–∞—Ç–∏'.")
        return

    mime_type = (doc.mime_type or "").lower()
    file_name = (doc.file_name or "").lower()
    
    if not (mime_type == "text/csv" or file_name.endswith(".csv")):
        await update.message.reply_text(
            "‚ùå –û—á—ñ–∫—É—é CSV —Ñ–∞–π–ª (text/csv –∞–±–æ .csv).\n"
            "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–∞–π–ª –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°–∫–∞—Å—É–≤–∞—Ç–∏'."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    file_size_mb = doc.file_size / (1024 * 1024) if doc.file_size else 0
    if file_size_mb > settings.MAX_CSV_SIZE_MB:
        await update.message.reply_text(
            f"‚ùå –§–∞–π–ª –∑–∞–≤–µ–ª–∏–∫–∏–π ({file_size_mb:.1f} MB).\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: {settings.MAX_CSV_SIZE_MB} MB"
        )
        return

    os.makedirs(settings.TEMP_CSV_DIR, exist_ok=True)
    
    timestamp = int(time.time())
    safe_filename = f"{timestamp}_{doc.file_name or 'knowledge_base.csv'}"
    temp_path = os.path.join(settings.TEMP_CSV_DIR, safe_filename)
    
    try:
        await update.message.chat.send_action(constants.ChatAction.UPLOAD_DOCUMENT)
        await update.message.reply_text("‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Ñ–∞–π–ª...")
        
        file = await doc.get_file()
        await file.download_to_drive(temp_path)
        
        logger.info(f"CSV file downloaded: {temp_path}")
        
        await update.message.reply_text(
            "‚è≥ –û–±—Ä–æ–±–ª—è—é —Ñ–∞–π–ª —Ç–∞ –ø–µ—Ä–µ–±—É–¥–æ–≤—É—é —ñ–Ω–¥–µ–∫—Å...\n"
            "–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω."
        )
        
        knowledge_service: KnowledgeService = context.bot_data["knowledge_service"]
        
        ok, message, meta = await knowledge_service.update_knowledge_base(temp_path)
        
        context.user_data.pop(BotState.AWAITING_CSV_UPLOAD.value, None)
        
        if ok:
            response_text = (
                f"‚úÖ {message}\n\n"
                f"üìÑ –§–∞–π–ª: `{os.path.basename(meta.get('csv_path', ''))}`\n"
                f"üìä –°—Ç—Ä–æ–∫: *{meta.get('row_count', 0)}*\n"
                f"‚è∞ –°—Ç–≤–æ—Ä–µ–Ω–æ: `{meta.get('built_at', '–Ω–µ–≤—ñ–¥–æ–º–æ')}`"
            )
            
            await update.message.reply_text(
                response_text,
                parse_mode=constants.ParseMode.MARKDOWN
            )
            
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é
            reply_keyboard = get_admin_keyboard()
            await update.message.reply_text(
                "üéâ –ë–∞–∑–∞ –∑–Ω–∞–Ω—å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞! –û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:",
                reply_markup=ReplyKeyboardMarkup(
                    reply_keyboard, 
                    one_time_keyboard=True, 
                    resize_keyboard=True
                )
            )
        else:
            # –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {message}")
            
            reply_keyboard = get_admin_keyboard()
            await update.message.reply_text(
                "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                reply_markup=ReplyKeyboardMarkup(
                    reply_keyboard, 
                    one_time_keyboard=True, 
                    resize_keyboard=True
                )
            )
            
    except Exception as e:
        logger.error(f"Error processing CSV upload: {e}")
        context.user_data.pop(BotState.AWAITING_CSV_UPLOAD.value, None)
        
        reply_keyboard = get_admin_keyboard()
        await update.message.reply_text(
            f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É: {str(e)}",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard, 
                one_time_keyboard=True, 
                resize_keyboard=True
            )
        )
    finally:
        try:
            if os.path.exists(temp_path):
                os.remove(temp_path)
                logger.info(f"Temporary file removed: {temp_path}")
        except Exception as e:
            logger.warning(f"Failed to remove temp file {temp_path}: {e}")


async def handle_csv_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await handle_csv_document_upload(update, context)


async def cancel_upload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"CSV upload cancelled by user {update.effective_user.id}")
    
    context.user_data.pop(BotState.AWAITING_CSV_UPLOAD.value, None)
    
    reply_keyboard = get_admin_keyboard()
    await update.message.reply_text(
        "‚ùå –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, 
            one_time_keyboard=True, 
            resize_keyboard=True
        )
    )
    return ConversationHandler.END


@admin_required
async def kb_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"Knowledge base status requested by user {update.effective_user.id}")
    
    try:
        knowledge_service: KnowledgeService = context.bot_data["knowledge_service"]
        meta = knowledge_service.get_knowledge_base_status()
        
        if not meta.get("csv_path"):
            if os.path.exists(settings.CSV_FILE_PATH):
                file_size = os.path.getsize(settings.CSV_FILE_PATH)
                file_mtime = os.path.getmtime(settings.CSV_FILE_PATH)
                from datetime import datetime
                mtime_str = datetime.utcfromtimestamp(file_mtime).isoformat(timespec="seconds") + "Z"
                
                status_text = (
                    "üìö *–°—Ç–∞—Ç—É—Å –±–∞–∑–∏ –∑–Ω–∞–Ω—å*\n\n"
                    f"üìÑ –§–∞–π–ª: `{os.path.basename(settings.CSV_FILE_PATH)}`\n"
                    f"üìè –†–æ–∑–º—ñ—Ä: *{file_size / 1024:.1f} KB*\n"
                    f"üìÖ –ó–º—ñ–Ω–µ–Ω–æ: `{mtime_str}`\n"
                    f"‚ö†Ô∏è –Ü–Ω–¥–µ–∫—Å –Ω–µ —Å—Ç–≤–æ—Ä—é–≤–∞–≤—Å—è —á–µ—Ä–µ–∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è"
                )
            else:
                status_text = "‚ÑπÔ∏è CSV —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV'."
        else:
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            csv_name = os.path.basename(meta.get("csv_path", ""))
            row_count = meta.get("row_count", 0)
            built_at = meta.get("built_at", "–Ω–µ–≤—ñ–¥–æ–º–æ")
            csv_mtime = meta.get("csv_mtime", "–Ω–µ–≤—ñ–¥–æ–º–æ")
            checksum = str(meta.get("checksum", ""))[:12] + "..." if meta.get("checksum") else "–Ω–µ–≤—ñ–¥–æ–º–æ"
            
            status_text = (
                "üìö *–°—Ç–∞—Ç—É—Å –±–∞–∑–∏ –∑–Ω–∞–Ω—å*\n\n"
                f"üìÑ –§–∞–π–ª: `{csv_name}`\n"
                f"üìä –°—Ç—Ä–æ–∫: *{row_count}*\n"
                f"üî® –Ü–Ω–¥–µ–∫—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ: `{built_at}`\n"
                f"üìÖ CSV –∑–º—ñ–Ω–µ–Ω–æ: `{csv_mtime}`\n"
            )
        
        await update.message.reply_text(
            status_text,
            parse_mode=constants.ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"Error getting knowledge base status: {e}")
        await update.message.reply_text(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –±–∞–∑–∏ –∑–Ω–∞–Ω—å."
        )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.message.text
    session_id = str(uuid.uuid5(uuid.NAMESPACE_DNS, f"telegram-user-{user_id}"))
    logger.info(f"Processing message from user {user_id}: {query}")

    auth_service: AuthService = context.bot_data["auth_service"]

    if query == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ–º—ñ—á–Ω–∏–∫–∞":
        logger.info(f"User {user_id} requested to return to assistant")
        auth_service.logout(user_id)
        context.user_data.clear()
        await start(update, context)
        return

    if query == "–°–∫–∞—Å—É–≤–∞—Ç–∏" and context.user_data.get(BotState.AWAITING_CSV_UPLOAD.value):
        context.user_data.pop(BotState.AWAITING_CSV_UPLOAD.value, None)
        reply_keyboard = get_admin_keyboard()
        await update.message.reply_text(
            "‚ùå –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard, 
                one_time_keyboard=True, 
                resize_keyboard=True
            )
        )
        return

    if query == "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV":
        await kb_upload(update, context)
        return
        
    if query == "–°—Ç–∞—Ç—É—Å –±–∞–∑–∏ –∑–Ω–∞–Ω—å":
        await kb_status(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ–º—Ç"
    if query == "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ–º—Ç":
        await _request_new_prompt(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–æ–º—Ç"
    if query == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–æ–º—Ç":
        prompt_service = PostgresPromptService()
        current_prompt = prompt_service.get_current_prompt()
        reply_keyboard = get_admin_keyboard()
        
        if len(current_prompt) > 4000:
            parts = [current_prompt[i:i + 4000] for i in range(0, len(current_prompt), 4000)]
            for part in parts:
                await update.message.reply_text(f"–ß–∞—Å—Ç–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç—É:\n\n{part}")
        else:
            await update.message.reply_text(f"–ü–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–º—Ç:\n\n{current_prompt}")
        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é"
    if query == "–û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é":
        logger.info(f"Calling clear_history for user {user_id}")
        await clear_history(update, context)
        return

    if context.user_data.get(BotState.AWAITING_PASSWORD.value):
        if auth_service.login(user_id, query):
            context.user_data.clear()
            logger.info(f"User {user_id} logged in as admin: {auth_service.is_admin(user_id)}")
            reply_keyboard = get_admin_keyboard()
            await update.message.reply_text(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
            )
            return
        else:
            reply_keyboard = [[KeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ–º—ñ—á–Ω–∏–∫–∞")]]
            await update.message.reply_text(
                "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø–æ–º—ñ—á–Ω–∏–∫–∞.",
                reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
            )
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∂–∏–º–∞ —Å–±–æ—Ä–∞ –º–Ω–æ–≥–æ—á–∞—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞
    if context.user_data.get(BotState.AWAITING_PROMPT.value):
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞
        if query == "–ó–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–æ–º—Ç":
            prompt_parts = context.user_data.get("prompt_parts", [])
            if not prompt_parts:
                await update.message.reply_text(
                    "–ù–µ–º–∞—î –∂–æ–¥–Ω–æ—ó —á–∞—Å—Ç–∏–Ω–∏ –ø—Ä–æ–º—Ç—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º—Ç.",
                    reply_markup=ReplyKeyboardMarkup(
                        [[KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏")]],
                        one_time_keyboard=True,
                        resize_keyboard=True
                    )
                )
                return

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –ø—Ä–æ–º—Ç–∞ –≤ –æ–¥–∏–Ω
            complete_prompt = "\n".join(prompt_parts)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º {context} –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            formatted_prompt = f'"""\n{complete_prompt}\n"""'
            if "{context}" not in complete_prompt:
                formatted_prompt = f'"""\n{complete_prompt}\n{{context}}\n"""'

            knowledge_service: KnowledgeService = context.bot_data["knowledge_service"]
            try:
                if knowledge_service.update_prompt(formatted_prompt):
                    context.user_data.clear()
                    reply_keyboard = get_admin_keyboard()
                    await update.message.reply_text(
                        "–ü—Ä–æ–º—Ç —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!",
                        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
                    )
                else:
                    reply_keyboard = [[KeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ–º—ñ—á–Ω–∏–∫–∞")]]
                    await update.message.reply_text(
                        "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ–º–ø—Ç–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–º–ø—Ç–∞ —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
                    )
            except Exception as e:
                logger.error(f"Failed to update prompt for user {user_id}: {e}")
                reply_keyboard = [[KeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ–º—ñ—á–Ω–∏–∫–∞")]]
                await update.message.reply_text(
                    f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ–º–ø—Ç–∞: {str(e)}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                    reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
                )
            return

        # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã
        if query == "–°–∫–∞—Å—É–≤–∞—Ç–∏":
            context.user_data.clear()
            reply_keyboard = get_admin_keyboard()
            await update.message.reply_text(
                "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º—Ç—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
                reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
            )
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å –ø—Ä–æ–º—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–±–æ—Ä
        if "prompt_parts" not in context.user_data:
            context.user_data["prompt_parts"] = []

        context.user_data["prompt_parts"].append(query)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ
        parts_count = len(context.user_data["prompt_parts"])
        await update.message.reply_text(
            f"–û—Ç—Ä–∏–º–∞–Ω–æ —á–∞—Å—Ç–∏–Ω—É –ø—Ä–æ–º—Ç—É #{parts_count}. –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≤–≤–æ–¥–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—É —á–∞—Å—Ç–∏–Ω—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–æ–º—Ç', —è–∫—â–æ –≤—Å—ñ —á–∞—Å—Ç–∏–Ω–∏ –≤–≤–µ–¥–µ–Ω–æ.",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("–ó–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–æ–º—Ç")], [KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏")]],
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )
        return

    if auth_service.is_authorized(user_id) and auth_service.is_admin(user_id):
        logger.info(f"User {user_id} is admin: {auth_service.is_admin(user_id)}")
        reply_keyboard = get_admin_keyboard()
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return

    knowledge_service: KnowledgeService = context.bot_data["knowledge_service"]
    loop = asyncio.get_event_loop()
    query_task = loop.run_in_executor(
        None,
        lambda: knowledge_service.process_query(query, session_id)
    )

    while not query_task.done():
        await update.message.chat.send_action("typing")
        await asyncio.sleep(4)

    try:
        response = await query_task
        await update.message.chat.send_action("typing")
        try:
            await update.message.reply_text(response, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"Failed to send response: {e}")
            await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"Error processing query for user {user_id}: {e}")
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get(BotState.AWAITING_CSV_UPLOAD.value):
        await handle_csv_document_upload(update, context)
        return
    
    # –ò–Ω–∞—á–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    await update.message.reply_text("–î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞.")


async def login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    args = context.args
    if not args:
        context.user_data[BotState.AWAITING_PASSWORD.value] = True
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –ø–∞—Ä–æ–ª—å:",
            reply_markup=ReplyKeyboardRemove()
        )
        return
    password = args[0]
    auth_service: AuthService = context.bot_data["auth_service"]
    if auth_service.login(telegram_id, password):
        context.user_data.clear()
        logger.info(f"User {telegram_id} logged in as admin: {auth_service.is_admin(telegram_id)}")
        reply_keyboard = get_admin_keyboard()
        await update.message.reply_text(
            "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
    else:
        reply_keyboard = [[KeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ–º—ñ—á–Ω–∏–∫–∞")]]
        context.user_data[BotState.AWAITING_PASSWORD.value] = True
        await update.message.reply_text(
            "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø–æ–º—ñ—á–Ω–∏–∫–∞.",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
        )


@admin_required
async def change_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _request_new_prompt(update, context)


@admin_required
async def clear_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    session_id = str(uuid.uuid5(uuid.NAMESPACE_DNS, f"telegram-user-{user_id}"))
    logger.info(f"Clearing history for user {user_id} with session_id {session_id}")

    try:
        knowledge_service: KnowledgeService = context.bot_data["knowledge_service"]
        if knowledge_service.clear_history(session_id):
            logger.info(f"History cleared for user {user_id}")
            await update.message.reply_text("–Ü—Å—Ç–æ—Ä—ñ—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞!")
            await start(update, context)
        else:
            logger.error(f"Failed to clear history for user {user_id}")
            await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    except Exception as e:
        logger.error(f"Failed to clear history for user {user_id}: {e}")
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")